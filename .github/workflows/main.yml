# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Remove-Item "C:\Program Files\LLVM" -recurse
          
      - run: |
          find c:/ -iname api-ms-win-core-synch-l1-2-0.dll
        shell: bash
        name: 'find c:api-ms-win-core-synch-l1-2-0.dll'
        if: false

      - run: |
          find d:/ -iname api-ms-win-core-synch-l1-2-0.dll
        shell: bash
        name: 'find d:api-ms-win-core-synch-l1-2-0.dll'
        if: false
        
      - run: |
          dir "C:\hostedtoolcache\windows\Python\"
          dir "C:\Program Files\LLVM\"
          dir "C:\Program Files\LLVM\bin\"
          dir "C:\Program Files\LLVM\lib\"
          Get-Location
          Get-ComputerInfo  | select windowsversion
          [environment]::OSVersion
        shell: powershell
        name: 'Windows version'

      - run: |
          & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property catalog_productDisplayVersion
        shell: powershell
        name: 'Visual Studio version'

      - run: |
          choco uninstall --yes --all-versions llvm
        shell: powershell
        name: 'uninstall system llvm'
        if: false
      
      - run: |
          write-host Downloading llvm
          curl https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/LLVM-13.0.0-win64.exe -o llvm.exe
          write-host Extracting llvm
          7z x llvm.exe -ollvm
          dir llvm
          dir llvm\bin
        shell: powershell
        working-directory: ${{env.GITHUB_WORKSPACE}}
        name: 'install llvm 13'
        if: false

      - run: |
          Write-Host Prepending $env:llvm_bin_path to PATH
          Write-Host "##vso[task.prependpath]$env:llvm_bin_path"
          Write-Host Prepending $env:llvm_lib_windows to PATH
          Write-Host "##vso[task.prependpath]$env:llvm_lib_windows"
          echo $env:llvm_bin_path | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo $env:llvm_lib_windows | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell
        working-directory: ${{env.GITHUB_WORKSPACE}}
        name: 'set PATH'
        env:
          llvm_bin_path: C:\Program Files\LLVM\bin
          llvm_lib_windows: C:\Program Files\LLVM\lib 

      - run: |
          & curl https://www.python.org/ftp/python/3.9.10/python-3.9.10-amd64.exe -o python-3.9.10-amd64.exe
          & .\python-3.9.10-amd64.exe /passive PrependPath=1 InstallAllUsers=1
          sleep 40
          dir $env:python_bin_path
          echo $env:python_bin_path | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell
        working-directory: ${{env.GITHUB_WORKSPACE}}
        name: 'install pyton'
        env:
          python_bin_path: 'C:\Program Files\Python39'

      - run: |
          write-host $env:path
          write-host Downloading fd
          Invoke-WebRequest https://github.com/sharkdp/fd/releases/download/v8.2.1/fd-v8.2.1-i686-pc-windows-msvc.zip -OutFile fd.zip
          7z x fd.zip -o"C:\Windows"
          write-host Finding files
          fd.exe -HI clang_rt.asan_dynamic-x86_64.dll
          fd.exe -HI clang_rt.asan_dll_thunk-x86_64.lib
          fd.exe -HI clang_rt.asan-x86_64.lib
          fd.exe -HI clang_rt.asan_cxx-x86_64.lib
          fd.exe -HI clang.exe
          get-command clang
        shell: powershell
        working-directory: ${{env.GITHUB_WORKSPACE}}
        name: 'find files'
        env:
          llvm_bin_path: C:\Program Files\LLVM\bin\bin
          llvm_lib_windows: C:\Program Files\LLVM\bin\lib\clang\13.0.0\lib\windows

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          architecture: 'x64' 
        if: false

      - run: |
          write-host Downloading python
          curl https://www.python.org/ftp/python/3.9.10/python-3.9.10-amd64.exe -o python-3.9.10-amd64.exe
          write-host Extracting python
          7z x llvm.exe -ollvm
          dir llvm
          dir llvm\bin
        shell: powershell
        working-directory: ${{env.GITHUB_WORKSPACE}}
        name: 'install Pyton'
        if: false

      - run: |
          python --version
          pip install cffi
        shell: powershell
        name: 'Install python dependencies'

      - run: |
          python src
        shell: powershell
        name: 'build src'
        if: false

      - run: |
          "C:\\Program Files\\LLVM\\bin\\clang.exe" --target=x86_64-pc-windows-msvc -fuse-ld=lld -Wno-cast-align -fcomment-block-commands=retval -ferror-limit=200 -fmessage-length=0 -fno-short-enums -ffunction-sections -fdata-sections -std=c99 -DWIN32 -D_WINDLL -Wno-everything  -g -gdwarf-4 -O0 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address -static-libsan  -Wl,/ignore:longsections,/WX,/wholearchive  -I"C:\\Program Files\\Python39\\include"  -L"C:\\Program Files\\Python39\\libs"   py_file_run.c -o py_file_run.exe
        shell: cmd
        working-directory: src
        name: build

      - run: |
          #$env:PATH
          #$dumpbin = vswhere -latest -requires Microsoft.Component.MSBuild -find **\dumpbin.exe | select-object -first 1
          #& $dumpbin /dependents py_file_run.exe
          #get-command api-ms-win-core-synch-l1-2-0.dll | Format-List *
          #get-command python39.dll | Format-List *
          #get-command KERNEL32.dll | Format-List *
          # python .\test.py
          ./py_file_run.exe ${{env.python.pythonLocation}} .\test.py
        shell: powershell
        working-directory: src
        name: 'test'